version: 2.1

jobs:
  init:
    working_directory: ~/protocol-dashboard
    docker:
      - image: circleci/ruby:2.6-node

    steps:
      - checkout

      - run: echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc

      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - dependency-cache-

      - run: npm ci

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      # Lint
      - run:
          name: lint
          command: npm run lint

      # Persist node modules
      - persist_to_workspace:
          root: ./
          paths:
            - node_modules

  build-staging:
    working_directory: ~/protocol-dashboard
    resource_class: large
    docker:
      - image: circleci/ruby:2.6-node
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build
          command: CI=false npm run build:stage
      - run:
          name: armada bundle
          command: |
            timestamp=$(date +%s)
            filename="$(npx armada-cli bundle create build${timestamp} build)"
            hash="$(npx armada-cli bundle checksum $filename)"
            echo "export FILENAME='$filename'" >> tmp.env
            echo "export HASH='$hash'" >> tmp.env
      - persist_to_workspace:
          root: ./
          paths:
            - ./*

  pin-staging:
    working_directory: ~/protocol-dashboard
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: deploy to s3
          command: |
            source tmp.env
            aws s3 cp ${FILENAME} s3://dashboard.staging.audius.org/${FILENAME} --cache-control max-age=0

  deploy-staging:
    working_directory: ~/protocol-dashboard
    docker:
      - image: circleci/ruby:2.6-node
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: armada publish
          command: |
            source tmp.env
            npx armada-cli project publish 0x3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1 https://s3.us-west-1.amazonaws.com/dashboard.staging.audius.org/${FILENAME} ${HASH} --key=${ARMADA_ADMIN_PRIVATE_KEY}

  build-prod:
    working_directory: ~/protocol-dashboard
    docker:
      - image: circleci/ruby:2.6-node
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: build
          command: CI=false npm run build:prod
      - run:
          name: zip build
          command: zip -r build.zip ./build
      - persist_to_workspace:
          root: ./
          paths:
            - ./*

  deploy-prod:
    working_directory: ~/protocol-dashboard
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Deploy to S3
          command: |
            aws s3 sync build s3://dashboard.audius.org --delete --cache-control max-age=604800
            aws s3 cp s3://dashboard.audius.org/index.html s3://dashboard.audius.org/index.html --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type text/html --metadata-directive REPLACE --acl public-read
            aws s3 cp build.zip s3://dashboard.audius.org/build.zip --cache-control max-age=0

  update-prod-ga-build:
    working_directory: ~/protocol-dashboard
    docker:
      - image: circleci/ruby:2.6-node
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: update build in ga
          command: npm run update-build:prod
      - persist_to_workspace:
          root: ./
          paths:
            - ./build_cid.txt

  publish-prod-build-cids:
    working_directory: ~/protocol-dashboard
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - run:
          name: install-awscli
          command: sudo pip install awscli
      - attach_workspace:
          at: ./
      - run:
          name: Push to S3
          command: aws s3 cp build_cid.txt s3://dashboard.audius.org/build_cid.txt

  update-prod-records:
    working_directory: ~/protocol-dashboard
    docker:
      - image: circleci/ruby:2.6-node
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Update Cloudflare records
          command: |
            DNS_NAME=_dnslink.dashboard.audius.org
            CID=$(cat ./build_cid.txt)
            curl -X PUT "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE}/dns_records/${CLOUDFLARE_PROD_DASHBOARD_DNS_ID}" \
              -H "X-Auth-Email: ${CLOUDFLARE_AUTH_EMAIL}" \
              -H "Authorization: Bearer ${CLOUDFLARE_AUTH_KEY}" \
              -H "Content-Type: application/json" \
              --data '{"type":"TXT","name":"'"$DNS_NAME"'","content":"\"dnslink=/ipfs/'"$CID"'\"","ttl":1,"proxied":false}'

workflows:
  version: 2
  build-deploy:
    jobs:
      - init
      - build-staging:
          requires:
            - init
      - pin-staging:
          context:
            - Audius Client
          requires:
            - build-staging
          # filters:
          #   branches:
          #     only: /^main$/
      - deploy-staging:
          context:
            - Armada
          requires:
            - pin-staging
          # filters:
          #   branches:
          #     only: /^main$/
      - build-prod:
          requires:
            - init
      - hold-deploy-prod:
          type: approval
          requires:
            - build-prod
          filters:
            branches:
              only: /^main$/
      - deploy-prod:
          context: Audius Client
          requires:
            - hold-deploy-prod
          filters:
            branches:
              only: /^main$/
      - update-prod-ga-build:
          context: Pinata
          requires:
            - deploy-prod
          filters:
            branches:
              only: /^main$/
      - publish-prod-build-cids:
          context: Audius Client
          requires:
            - update-prod-ga-build
          filters:
            branches:
              only: /^main$/
      - hold-update-prod-records:
          type: approval
          requires:
            - update-prod-ga-build
          filters:
            branches:
              only: /^main$/
      - update-prod-records:
          context:
            - Audius Client
            - Cloudflare API
          requires:
            - hold-update-prod-records
          filters:
            branches:
              only: /^main$/
